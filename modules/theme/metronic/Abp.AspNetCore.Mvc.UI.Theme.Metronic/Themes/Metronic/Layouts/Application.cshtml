@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Shared.Components
@using Volo.Abp.AspNetCore.Mvc.AntiForgery

@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Bundling
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.MobileHeader
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.Header
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.Header.SubHeader
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.Brand
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.Menu
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.Scrolltop
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.Footer
@using Abp.AspNetCore.Mvc.UI.Theme.Metronic.Themes.Metronic.Components.User

@inject IAbpAntiForgeryManager AbpAntiForgeryManager
@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@{
    Layout = null;
    AbpAntiForgeryManager.SetCookie();

    var pageTitle = ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title; //TODO: Discard to get from Title

    if (PageLayout.Content.Title != null)
    {
        if (!string.IsNullOrWhiteSpace(pageTitle))
        {
            pageTitle = " | " + pageTitle;
        }

        pageTitle = PageLayout.Content.Title + pageTitle;
    }
}
<!DOCTYPE html>
<html lang="@CultureInfo.CurrentCulture.Name">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Application)

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <title>@pageTitle</title>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700" />
    <abp-style-bundle name="@MetronicThemeBundles.Styles.Global" />
    @await RenderSectionAsync("styles", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Application)
</head>
<body class="header-fixed header-mobile-fixed subheader-enabled subheader-fixed aside-enabled aside-fixed aside-minimize-hoverable page-loading">
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Application)

    @(await Component.InvokeAsync<MainMobileHeaderViewComponent>())
    <div class="d-flex flex-column flex-root">
        <div class="d-flex flex-row flex-column-fluid page">

            <div class="aside aside-left d-flex flex-column flex-row-auto" id="kt_aside">
                @(await Component.InvokeAsync<MainNavbarBrandViewComponent>())
                @(await Component.InvokeAsync<MainNavbarMenuViewComponent>())
            </div>

            <div class="d-flex flex-column flex-row-fluid wrapper" id="kt_wrapper">
                @(await Component.InvokeAsync<MainHeaderViewComponent>())
                <div class="content d-flex flex-column flex-column-fluid" id="kt_content">
                    @if (ViewBag.DisabledSubHeader != true)
                    {
                        @(await Component.InvokeAsync<MainSubHeaderViewComponent>())
                    }
                    <div class="d-flex flex-column-fluid">
                        <div class="container">
                            @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Application)
                            @RenderBody()
                            @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Application)
                        </div>
                    </div>
                </div>
                @(await Component.InvokeAsync<MainFooterViewComponent>())
            </div>

        </div>
    </div>

    @(await Component.InvokeAsync<MainScrolltopViewComponent>())
    @(await Component.InvokeAsync<MainUserViewComponent>())

    <script type="text/javascript">
        var KTAppSettings = { "breakpoints": { "sm": 576, "md": 768, "lg": 992, "xl": 1200, "xxl": 1400 }, "colors": { "theme": { "base": { "white": "#ffffff", "primary": "#3699FF", "secondary": "#E5EAEE", "success": "#1BC5BD", "info": "#8950FC", "warning": "#FFA800", "danger": "#F64E60", "light": "#E4E6EF", "dark": "#181C32" }, "light": { "white": "#ffffff", "primary": "#E1F0FF", "secondary": "#EBEDF3", "success": "#C9F7F5", "info": "#EEE5FF", "warning": "#FFF4DE", "danger": "#FFE2E5", "light": "#F3F6F9", "dark": "#D6D6E0" }, "inverse": { "white": "#ffffff", "primary": "#ffffff", "secondary": "#3F4254", "success": "#ffffff", "info": "#ffffff", "warning": "#ffffff", "danger": "#ffffff", "light": "#464E5F", "dark": "#ffffff" } }, "gray": { "gray-100": "#F3F6F9", "gray-200": "#EBEDF3", "gray-300": "#E4E6EF", "gray-400": "#D1D3E0", "gray-500": "#B5B5C3", "gray-600": "#7E8299", "gray-700": "#5E6278", "gray-800": "#3F4254", "gray-900": "#181C32" } }, "font-family": "Poppins" };
    </script>

    <abp-script-bundle name="@MetronicThemeBundles.Scripts.Global" />
    <script src="~/Abp/ApplicationConfigurationScript"></script>
    <script src="~/Abp/ServiceProxyScript"></script>
    @await RenderSectionAsync("scripts", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Application)
</body>
</html>
